package com.example.aws_sdk_android_vulnerability

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.amazonaws.auth.CognitoCachingCredentialsProvider
import com.amazonaws.mobileconnectors.iot.AWSIotMqttClientStatusCallback
import com.amazonaws.mobileconnectors.iot.AWSIotMqttManager
import com.amazonaws.regions.Regions
import com.example.aws_sdk_android_vulnerability.ui.theme.AwssdkandroidvulnerabilityTheme
import java.nio.charset.StandardCharsets

class MainActivity : ComponentActivity() {

    // Definir el endpoint de AWS IoT y el MQTT Manager
    private val CUSTOMER_SPECIFIC_ENDPOINT = "your-iot-endpoint.amazonaws.com"  // Reemplaza con tu endpoint de AWS IoT
    private val COGNITO_POOL_ID = "us-east-1:xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx"    // Reemplaza con tu pool de Cognito
    private val REGION = Regions.US_EAST_1                                      // Reemplaza con tu regiÃ³n

    private lateinit var mqttManager: AWSIotMqttManager
    private lateinit var credentialsProvider: CognitoCachingCredentialsProvider

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Configurar las credenciales de AWS
        credentialsProvider = CognitoCachingCredentialsProvider(
            applicationContext,
            COGNITO_POOL_ID,
            REGION
        )

        // Inicializar el AWS IoT MQTT Manager
        mqttManager = AWSIotMqttManager("test-client-id", CUSTOMER_SPECIFIC_ENDPOINT)

        // Conectarse al endpoint de AWS IoT
        connectToIoT()

        setContent {
            AwssdkandroidvulnerabilityTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    Greeting(
                        name = "Android",
                        modifier = Modifier.padding(innerPadding)
                    )
                }
            }
        }
    }

    private fun connectToIoT() {
        mqttManager.connect(credentialsProvider, object : AWSIotMqttClientStatusCallback {
            override fun onStatusChanged(status: AWSIotMqttClientStatusCallback.AWSIotMqttClientStatus?, throwable: Throwable?) {
                when (status) {
                    AWSIotMqttClientStatusCallback.AWSIotMqttClientStatus.Connecting -> {
                        println("Connecting to AWS IoT...")
                    }
                    AWSIotMqttClientStatusCallback.AWSIotMqttClientStatus.Connected -> {
                        println("Connected to AWS IoT")

                        // Una vez conectado, puedes suscribirte y publicar mensajes
                        mqttManager.publishString("Hello from Android!", "test/topic", AWSIotMqttQos.QOS0)
                    }
                    AWSIotMqttClientStatusCallback.AWSIotMqttClientStatus.ConnectionLost -> {
                        println("Connection lost: ${throwable?.message}")
                    }
                    AWSIotMqttClientStatusCallback.AWSIotMqttClientStatus.Reconnecting -> {
                        println("Reconnecting to AWS IoT...")
                    }
                    else -> {
                        println("Unknown status: $status, error: ${throwable?.message}")
                    }
                }
            }
        })
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "Hello $name!",
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    AwssdkandroidvulnerabilityTheme {
        Greeting("Android")
    }
}
